// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace ODataEFCoreShadowKeys
{
    public partial class ODataEFCoreShadowKeysContext : DbContext
    {
        public ODataEFCoreShadowKeysContext()
        {
        }

        public ODataEFCoreShadowKeysContext(DbContextOptions<ODataEFCoreShadowKeysContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Person> Person { get; set; }
        public virtual DbSet<Pet> Pet { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Data Source = (LocalDb)\MSSQLLocalDB; Integrated Security = True; Persist Security Info = True; Database = ODataEFCoreShadowKeys");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity<Person>(entity =>
            {
                entity.Property<int>("ShadowId");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.HasKey("ShadowId", "Id");

                entity.Property(e => e.Name).HasMaxLength(100).IsRequired(false);
            });

            modelBuilder.Entity<Pet>(entity =>
            {
                entity.Property<int>("ShadowId");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.HasKey("ShadowId", "Id");

                entity.Property(e => e.Name).HasMaxLength(100).IsRequired(false);

                entity.HasOne(d => d.Owner)
                    .WithOne()
                    .HasForeignKey<Pet>("ShadowId", "OwnerId");
                //.HasForeignKey<Pet>("ShadowId", "OwnerId");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}